#!/usr/bin/env bash
run_spigot_build() {
    while :; do
        if [[ -e ${TMP_FILE_LOCATIONS}BuildTools.jar ]]; then
            cd ${TMP_FILE_LOCATIONS}
            if [[ -e BuildTools.log.txt ]]; then
                rm -rf BuildTools.log.txt
            fi
            echo "SCREENNAME: ${cryptography}"
            sleep 5
            SECOND=0
            if [[ ${setting_resetspigot} = "true" ]]; then
                local spinner_progress_status="前回の実行環境の削除を開始"
                run_spinner
                if [[ ${PWD} = "tmp" ]]; then
                    rm -rf ./*
                fi
                local FILECLEARCHECK="y"
            fi
            screen -AdmS ${cryptography} java -jar BuildTools.jar --rev ${buildversion} nogui
            while [[ ${buildstatus} != "Success! Everything completed successfully. Copying final .jar files now." ]]; do
                #更新
                buildstatus=$(cat ./BuildTools.log.txt | grep "Success! Everything completed successfully. Copying final .jar files now.")
                #現状
                local spinner_progress_status="BUILD NOW                 "
                run_spinner
            done
            echo -e "\e[1;37;32mBUILD SUCCESS\e[0m             "
            time=${SECONDS}
            i=${time}
            ((sec = i % 60, min = (i % 3600) / 60, hrs = i / 3600))
            time_calculation=$(printf "%d:%02d:%02d" $hrs $min $sec)
            echo "掛かった時間: ${time_calculation}"
            #ファイル移動
            cd -
            mv ${TMP_FILE_LOCATIONS}spigot-${buildversion}.jar ${CACHE_FILE_LOCATIONS}cache/intsl_v/minecraft_jar/spigot/spigot${buildversion}.jar
            mc_server_create
        else
            wget -q ${SPIGOT_BUILD_TOOLS_URL} -P tmp
        fi
    done
}

run_forge_install() {
    create_temp=$(mktemp -d)
    wget -q ${mc_server_jar_url} -P ${create_temp}
    cd ${create_temp}
    echo "TEMP: ${create_temp}"
    echo "SCREENNAME: ${cryptography}"
    #インストーラーを起動
    get_forge_installer_name=$(find -maxdepth 1 -name "*.jar" | grep "forge-${minecraft_version}" | awk -F/ '{print $NF}')
    screen -AdmS ${cryptography} java -jar ${get_forge_installer_name} nougi --installServer

    while :; do
        if [ "$(screen -ls | grep ${cryptography})" == "" ]; then
            if [[ ${firstcount} = 1 ]]; then
                echo -e "${ECHO_GREEN_BOLD_COLOR}==> Install Successful${ECHO_COLOR_EXIT}"
                break
            fi
            spinner_progress_status="Forgeの準備中"
            run_spinner
            firstcount="1"
        else
            spinner_progress_status="Forgeのインストール中"
            run_spinner
        fi
    done

    if [[ $? = "1" ]]; then
        echo "$(tput bold && tput setaf 1)${message_system_error}:$(tput sgr0) サーバーのインストールに失敗しました"
    fi

    #出力ファイルを拾う
    get_forge_file_name=$(find -maxdepth 1 -name "*.jar" | grep "forge-${minecraft_version}" | awk -F/ '{print $NF}')

    #ファイルを保存
    #Forge本体
    cd -
    mkdir -p ${CACHE_FILE_LOCATIONS}minecraft_jar/forge/${minecraft_version}/${forge_type}
    mv ${create_temp}/libraries ${CACHE_FILE_LOCATIONS}minecraft_jar/forge/${minecraft_version}/${forge_type}/libraries
    find ${create_temp}* -maxdepth 1 -type f -name "*.jar" -exec mv {} ${CACHE_FILE_LOCATIONS}minecraft_jar/forge/${minecraft_version}/${forge_type} \;
    rm -rf ${CACHE_FILE_LOCATIONS}minecraft_jar/forge/${minecraft_version}/${forge_type}/forge-${minecraft_version}-${mc_forge_version}-installer.jar
    mc_server_create
}

cryptography=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1 | sort | uniq)

if [ ${mc_server_edition} = "official" ] || [ ${mc_server_edition} = "paper" ]; then
    mc_server_jar_file="${CACHE_FILE_LOCATIONS}minecraft_jar/$mc_server_edition/"
elif [[ ${mc_server_edition} = "spigot" ]]; then
    mc_server_jar_file="${CACHE_FILE_LOCATIONS}minecraft_jar/$mc_server_edition/"
elif [[ ${mc_server_edition} = "forge" ]]; then
    mc_server_jar_file="${CACHE_FILE_LOCATIONS}minecraft_jar/${mc_server_edition}/${minecraft_version}/${forge_type}/"
fi
mc_donwload_version="$INPUT_SERVER_VERSION"
spinner_progress_status="${message_file_check}"
run_spinner
if [ -e ${mc_server_jar_file}${mc_server_edition}${mc_donwload_version}.jar ]; then
    echo "ファイルの確認に成功しました"
    mc_server_create
else
    while :; do
        if [[ -e ${mc_server_jar_file}server${mc_donwload_version}.jar ]]; then
            echo "ファイルの確認に成功しました"
            break
            mc_server_create
        else
            if [[ ${mc_server_edition} = "forge" ]]; then
                if [[ -e ${CACHE_FILE_LOCATIONS}minecraft_jar/${mc_server_edition}/${minecraft_version}/${forge_type} ]]; then
                    echo "ファイルの確認に成功しました"
                    mc_server_create
                fi
            fi
            if [[ -z ${INPUT_Y_OR_N} ]]; then
                read -r -p ">" INPUT_Y_OR_N
                INPUT_Y_OR_N=${INPUT_Y_OR_N:-y}
            fi
            echo ${INPUT_Y_OR_N}
            case ${INPUT_Y_OR_N} in
            [yY] | [yY][eE][sS] | [-][yY])
                while :; do
                    spinner_progress_status="ファイルのダウンロード中"
                    run_spinner
                    if [[ -e "${mc_server_jar_file}${mc_server_edition}${mc_donwload_version}.jar" ]]; then
                        echo "${message_download_success}"
                        mc_server_create
                    elif [[ ${mc_server_edition} = spigot ]]; then
                        run_spigot_build
                    elif [[ ${mc_server_edition} = forge ]]; then
                        run_forge_install
                    else
                        if [[ ${get_pid_wget} != 0 ]]; then
                            wget -q ${mc_server_jar_url} -O ${mc_server_jar_file}${mc_server_edition}${mc_donwload_version}.jar &
                            pid=${get_pid_wget}
                        fi
                    fi
                done
                ;;
            [nN]*)
                DONWLOAD_CANCELLATION
                ;;
            *)
                echo "${message_use_possible}"
                ;;
            esac
        fi
    done
fi
