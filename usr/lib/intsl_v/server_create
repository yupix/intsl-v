#!/usr/bin/env bash

create_default_json(){
    cat <<EOF > ${mktemp}
  [
    {
    "type": "${mc_server_edition}",
    "name": "${input_server_name}",
    "description": "説明",
    "depends": {
      "jar": "${server_jar}",
      "lib": "ライブラリー"
    },
    "file": {
      "serverpath": "${mc_server_create_file_dir}/${input_server_name}",
      "hash": {
        "md5": "${get_jar_md5sum}",
        "sha512sum": "${get_jar_sha512sum}"
      }
    },
    "settings": {
      "main": {
        "maxmemory": "${SET_MAX_MEMORY}",
        "minmemory": "${SET_MIN_MEMORY}",
        "javahome": "java",
        "jvmargument": "-Xmx\${get_server_settings_main_maxmemory} -Xms\${get_server_settings_main_minmemory} -XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:MaxGCPauseMillis=100 -XX:+DisableExplicitGC -XX:TargetSurvivorRatio=90 -XX:G1NewSizePercent=50 -XX:G1MaxNewSizePercent=80 -XX:G1MixedGCLiveThresholdPercent=35 -XX:+AlwaysPreTouch -XX:+ParallelRefProcEnabled -Dusing.aikars.flags=mcflags.emc.gs",
        "screenname": "${cryptography}",
        "pid": "none",
        "status": "offline"
      },
      "buckup": {
        "mode": "true",
        "sleeptime": "1",
        "dir": "./backups",
        "target": "world"
      }
    }
  }
]
EOF
}

if [[ -z "${input_server_name}" ]]; then
    echo "サーバー名を入力してください。"
    read -r -p ">" input_server_name
fi
echo $input_server_name
if [[ ! -e ${HOME_FILE_LOCATIONS}/intsl_v ]]; then
    mkdir ${HOME_FILE_LOCATIONS}/intsl_v
fi

if [[ -z ${INPUT_SERVER_DIRECTORY} ]]; then
    if [[ ${default_mode} = "true" ]]; then
        INPUT_SERVER_DIRECTORY=${INPUT_SERVER_DIRECTORY:-${HOME_FILE_LOCATIONS}intsl_v}
    else
        echo "サーバーのディレクトリーを指定してください"
        echo "default: ${HOME_FILE_LOCATIONS}intsl_v"
        read -r -p ">" INPUT_SERVER_DIRECTORY
        INPUT_SERVER_DIRECTORY=${INPUT_SERVER_DIRECTORY:-${HOME_FILE_LOCATIONS}intsl_v}
    fi
fi
#ファイルの確認
if [[ ! -e ${INPUT_SERVER_DIRECTORY} ]]; then
    mkdir -p ${INPUT_SERVER_DIRECTORY}
fi
mc_server_create_file_dir="$INPUT_SERVER_DIRECTORY"
check_input_server_name="1"
while [[ ${check_input_server_name} -gt "0" ]]; do
    # 変数内に/, #, !,-,',$,",(,),,,;,:があるか確認する
    check_input_server_name=$(echo $input_server_name | grep -E '/|\#|\"|\;|\)|\!|\(|\:|\,|\-|'\' | wc -c)
    
    if [ $check_input_server_name -gt 0 ]; then
        echo "$check_input_server_name に「/  #  \! - \' $ \" ( )  ; :」が含まれいます"
        echo "再度入力してください"
        read -r -p ">" input_server_name
    else
        echo -e "${ECHO_GREEN_BOLD_COLOR}文字のスペルチェックに成功${ECHO_COLOR_EXIT}"
    fi
done
backup_input_server_name="${input_server_name}"
purpose="get"
. ${VAR_LIB_FILE_LOCATIONS}server_list
if [[ ${covering_check} = "true" ]]; then
    echo "$(tput bold && tput setaf 3)==> WARNING:$(tput sgr0) 既にサーバーリストに登録されています)"
fi
input_server_name="${backup_input_server_name}"
if [[ -e "${mc_server_create_file_dir}/${input_server_name}" ]]; then
    echo -e "${ECHO_YELLOW_BOLD_COLOR}==> WARNING: 既にディレクトリが存在します${ECHO_COLOR_EXIT}"
    echo "使用可能な代替案:"
    for i in $(seq 1 7); do
        if [[ ! -e "${mc_server_create_file_dir}/${input_server_name}${i}" ]]; then
            echo -e "- ${ECHO_GREEN_BOLD_COLOR}${i}: ${input_server_name}${i} ✓使用可能 ${ECHO_COLOR_EXIT}"
        else
            echo -e "- ${ECHO_RED_BOLD_COLOR}${i}: ${input_server_name}${i} ✕使用不可${ECHO_COLOR_EXIT}"
            not_available_count=$((not_available_count + 1))
        fi
        if [[ ${not_available_count} = "7" ]]; then
            echo "全ての代替手段が使用できません"
        fi
    done
    echo "変更する場合は代替案の数字を、しない場合は、nを入力してください"
    while :; do
        read -r -p ">" input_alternate_name
        case $input_alternate_name in
            [1] | [2] | [3] | [4] | [5] | [6] | [7])
                if [[ ! -e "${mc_server_create_file_dir}/${input_server_name}${input_alternate_name}" ]]; then
                    input_server_name="${input_server_name}${input_alternate_name}"
                    break
                else
                    echo "使用不可能なサーバー名です"
                fi
            ;;
            [nN] | [nN][oO])
                echo "${message_system_canceled}"
                exit 0
            ;;
            *)
                echo "代替案の数字、またはnを入力してください"
            ;;
        esac
    done
fi
echo -e "${ECHO_GREEN_BOLD_COLOR}==> Createfile${ECHO_COLOR_EXIT}"

echo -e "${ECHO_BLUE_BOLD_COLOR}  ->${ECHO_COLOR_EXIT} ${ECHO_WHITE_BOLD_COLOR}Running createfile hook: ${input_server_name}${ECHO_COLOR_EXIT}"
mkdir $mc_server_create_file_dir/${input_server_name}
if [[ -e $mc_server_create_file_dir/${input_server_name} ]]; then
    echo -e "${ECHO_GREEN_BOLD_COLOR}==> Createfile Successful${ECHO_COLOR_EXIT}"
else
    echo -e "${ECHO_RED_BOLD_COLOR}==> ERROR: file is not found${ECHO_COLOR_EXIT}"
    exit 1
fi
mc_donwload_version="$INPUT_SERVER_VERSION"
if [ ${mc_server_edition} = "official" ] || [ ${mc_server_edition} = "spigot" ] || [ ${mc_server_edition} = "paper" ]; then
    srce_edision="server"
    cp ${mc_server_jar_file}${mc_server_edition}${mc_donwload_version}.jar ${mc_server_create_file_dir}/${input_server_name}
    server_jar="${mc_server_edition}${mc_donwload_version}.jar"
    elif [[ $mc_server_edition = forge ]];then
    cp -r ${mc_server_jar_file}* ${mc_server_create_file_dir}/${input_server_name}
    get_forge_file_name=$(find ${mc_server_jar_file}* -maxdepth 1 -name "*.jar" | grep "forge-${minecraft_version}" | awk -F/ '{print $NF}')
    server_jar="${get_forge_file_name}"
fi

get_jar_md5sum=$(md5sum ${mc_server_create_file_dir}/${input_server_name}/${mc_server_edition}${mc_donwload_version}.jar | gawk '{print $1}')
get_jar_sha512sum=$(sha512sum ${mc_server_create_file_dir}/${input_server_name}/${mc_server_edition}${mc_donwload_version}.jar | gawk '{print $1}')



if [ -z "$SET_MAX_MEMORY" ]; then
    SET_MAX_MEMORY=${SET_MAX_MEMORY:-1G}
fi
if [ -z "$SET_MIN_MEMORY" ]; then
    SET_MIN_MEMORY=${SET_MIN_MEMORY:-1G}
fi


if [[ ! -e ${VAR_LIB_FILE_LOCATIONS}server_list.json ]];then
    cat <<EOF > ${VAR_LIB_FILE_LOCATIONS}server_list.json
[
  {
    "servers": "0"
  }
]
EOF
fi
mktemp_back=$(mktemp --suffix=.json)
cp ${VAR_LIB_FILE_LOCATIONS}server_list.json ${mktemp_back}
get_servers=$(cat ${VAR_LIB_FILE_LOCATIONS}server_list.json | jq -r .[0].servers)
new_get_servers=$(expr $get_servers +1)
echo "sa-ba- $new_get_servers"
cat ${VAR_LIB_FILE_LOCATIONS}server_list.json| jq '.[0].servers|="'${new_get_servers}'"' > ${mktemp_back}
mktemp=$(mktemp --suffix=.json)
#管理用のjson
create_default_json
echo "処理ナウ"
echo "${mktemp}"
jq add -s ${mktemp_back} ${mktemp} > ${VAR_LIB_FILE_LOCATIONS}server_list.json

spinner_progress_status="ファイルの確認中"
run_spinner
if [[ -e $mc_server_create_file_dir/${input_server_name} ]]; then
    echo "サーバーファイルの作成に成功しました。"
else
    echo "サーバーファイルの作成に失敗しました"
    exit 1
fi
exit 0
